generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Room {
  id           String          @id @default(cuid())
  name         String
  description  String
  image        String
  price        Int
  capacity     Int             @default(1)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  Reservation  Reservation[]
  RoomAmenitie RoomAmenities[]
}

model Amenities {
  id            String          @id @default(cuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  RoomAmenities RoomAmenities[]
}

model RoomAmenities {
  id         String    @id @default(cuid())
  roomId     String
  amenitieId String
  Amenities  Amenities @relation(fields: [amenitieId], references: [id], onDelete: Cascade)
  Room       Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Reservation {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  price     Int
  userId    String
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payment   Payment?
  Room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String      @id @default(cuid())
  method        String?
  amount        Int
  status        String      @default("unpaid")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reservationId String      @unique
  Reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  role          String        @default("user")
  phone         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Reservation   Reservation[]
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
